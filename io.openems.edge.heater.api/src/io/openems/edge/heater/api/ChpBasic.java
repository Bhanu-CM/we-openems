package io.openems.edge.heater.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.exceptions.OpenemsError.OpenemsNamedException;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.BooleanReadChannel;
import io.openems.edge.common.channel.BooleanWriteChannel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.DoubleReadChannel;
import io.openems.edge.common.channel.IntegerReadChannel;
import io.openems.edge.common.channel.value.Value;
import io.openems.edge.common.component.OpenemsComponent;

public interface ChpBasic extends OpenemsComponent {


    enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        /**
         * Write: Turn the CHP on (true) or off (false).
         * Read: The CHP is running (true) or not (false)
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        ENABLE_SIGNAL(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_WRITE)),

        /**
         * Temperature value of the outgoing hot water.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degrees Celsius
         * </ul>
         */

        FLOW_TEMPERATURE(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Temperature value of the water return flow.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degrees Celsius
         * </ul>
         */

        RETURN_TEMPERATURE(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Electric power generated by the chp at the moment.
         * <ul>
         * <li>Type: float
         * <li>Unit: kilowatt
         * </ul>
         */

        EFFECTIVE_ELECTRIC_POWER(Doc.of(OpenemsType.DOUBLE).unit(Unit.KILOWATT).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals an error (true) or no error occuring (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        ERROR(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals a warning (true) or no warning occuring (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        WARNING(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals that the chp is ready for operation (true) or not (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        READY(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY));
        private final Doc doc;


        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }

    }

    /**
     * Gets the Channel for {@link ChannelId#ENABLE_SIGNAL}.
     *
     * @return the Channel
     */
    public default BooleanWriteChannel getEnableSignalChannel(){
        return this.channel((ChannelId.ENABLE_SIGNAL));
    }
    
    /**
	 * Gets the enable signal, indicating if the CHP is running (true) or not (false).
	 * See {@link ChannelId#ENABLE_SIGNAL}.
	 *
	 * @return the Channel {@link Value}
	 */
	public default Value<Boolean> getEnableSignal() {
		return this.getEnableSignalChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ENABLE_SIGNAL}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEnableSignal(Boolean value) {
		this.getEnableSignalChannel().setNextValue(value);
	}
	
	/**
	 * Turn the CHP on (true) or off (false). See {@link ChannelId#ENABLE_SIGNAL}.
	 * 
	 * @return the Channel
	 * @throws OpenemsNamedException on error
	 */
	public default void setEnableSignal(Boolean value) throws OpenemsNamedException {
		this.getEnableSignalChannel().setNextWriteValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#FLOW_TEMPERATURE}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getFlowTemperatureChannel(){
        return this.channel(ChannelId.FLOW_TEMPERATURE);
    }
    
    /**
	 * Gets the temperature value of the outgoing hot water in dezidegree Celsius.
	 * See {@link ChannelId#FLOW_TEMPERATURE}.
	 *
	 * @return the Channel {@link Value}
	 */
	public default Value<Integer> getFlowTemperature() {
		return this.getFlowTemperatureChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#FLOW_TEMPERATURE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setFlowTemperature(Integer value) {
		this.getFlowTemperatureChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#FLOW_TEMPERATURE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setFlowTemperature(int value) {
		this.getFlowTemperatureChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#RETURN_TEMPERATURE}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getReturnTemperatureChannel(){
        return this.channel(ChannelId.RETURN_TEMPERATURE);
    }
    
    /**
     * Get the rewind temperature in dezidegree Celsius.
	 * See {@link ChannelId#RETURN_TEMPERATURE}.
	 *
	 * @return the Channel {@link Value}
     */
    public default Value<Integer> getReturnTemperature() {
		return this.getReturnTemperatureChannel().value();
	}
    
    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RETURN_TEMPERATURE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setReturnTemperature(Integer value) {
		this.getReturnTemperatureChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RETURN_TEMPERATURE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setReturnTemperature(int value) {
		this.getReturnTemperatureChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}.
     *
     * @return the Channel
     */
    public default DoubleReadChannel getEffectiveElectricPowerChannel(){
        return this.channel(ChannelId.EFFECTIVE_ELECTRIC_POWER);
    }
    
    /**
     * Get the currently generated electric power of the chp in kilowatt. Value contains a double.
	 * See {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}.
	 *
	 * @return the Channel {@link Value}
     */
    public default Value<Double> getEffectiveElectricPower() {
		return this.getEffectiveElectricPowerChannel().value();
	}

    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEffectiveElectricPower(Double value) {
		this.getEffectiveElectricPowerChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEffectiveElectricPower(double value) {
		this.getEffectiveElectricPowerChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#ERROR}.
     *
     * @return the Channel
     */
    public default BooleanReadChannel getErrorChannel(){
        return this.channel(ChannelId.ERROR);
    }
	
    /**
     * Check if an error occurred. False for no error.
	 * See {@link ChannelId#ERROR}.
     *
	 * @return the Channel {@link Value}
     */
    public default Value<Boolean> getError() {
		return this.getErrorChannel().value();
	}

    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ERROR}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setError(Boolean value) {
		this.getErrorChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#WARNING}.
     *
     * @return the Channel
     */
    public default BooleanReadChannel getWarningChannel(){
        return this.channel(ChannelId.WARNING);
    }
	
    /**
     * Check if a warning occurred. False for no warning.
	 * See {@link ChannelId#WARNING}.
     *
	 * @return the Channel {@link Value}
     */
    public default Value<Boolean> getWarning() {
		return this.getWarningChannel().value();
	}

    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#WARNING}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setWarning(Boolean value) {
		this.getWarningChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#READY}.
     *
     * @return the Channel
     */
    public default BooleanReadChannel getReadyChannel(){
        return this.channel(ChannelId.READY);
    }
	
    /**
     * Check if the chp is ready for operation. True means ready.
	 * See {@link ChannelId#READY}.
     *
	 * @return the Channel {@link Value}
     */
    public default Value<Boolean> getReady() {
		return this.getReadyChannel().value();
	}

    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#READY}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setReady(Boolean value) {
		this.getReadyChannel().setNextValue(value);
	}

}
